//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace sample
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace sample.sample_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::sample.sample_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::sample.sample_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[83];
            _typeNameTable[0] = "Esri.ArcGISRuntime.UI.Controls.MapView";
            _typeNameTable[1] = "Esri.ArcGISRuntime.UI.Controls.GeoView";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[3] = "Esri.ArcGISRuntime.Mapping.Map";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "Esri.ArcGISRuntime.Mapping.LayerCollection";
            _typeNameTable[6] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>";
            _typeNameTable[7] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>";
            _typeNameTable[8] = "Esri.ArcGISRuntime.Mapping.Layer";
            _typeNameTable[9] = "Esri.ArcGISRuntime.LoadStatus";
            _typeNameTable[10] = "System.Enum";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "System.Exception";
            _typeNameTable[13] = "Esri.ArcGISRuntime.Portal.Item";
            _typeNameTable[14] = "String";
            _typeNameTable[15] = "Double";
            _typeNameTable[16] = "Esri.ArcGISRuntime.Geometry.SpatialReference";
            _typeNameTable[17] = "Esri.ArcGISRuntime.Geometry.Envelope";
            _typeNameTable[18] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[19] = "Boolean";
            _typeNameTable[20] = "System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>";
            _typeNameTable[21] = "Esri.ArcGISRuntime.Geometry.Polygon";
            _typeNameTable[22] = "Esri.ArcGISRuntime.Geometry.Multipart";
            _typeNameTable[23] = "Esri.ArcGISRuntime.UI.WrapAroundMode";
            _typeNameTable[24] = "Esri.ArcGISRuntime.UI.ViewLabelProperties";
            _typeNameTable[25] = "Esri.ArcGISRuntime.UI.LocationDisplay";
            _typeNameTable[26] = "Esri.ArcGISRuntime.UI.BackgroundGrid";
            _typeNameTable[27] = "Esri.ArcGISRuntime.UI.Grid";
            _typeNameTable[28] = "Esri.ArcGISRuntime.UI.SketchEditor";
            _typeNameTable[29] = "Esri.ArcGISRuntime.UI.MapViewInteractionOptions";
            _typeNameTable[30] = "Esri.ArcGISRuntime.UI.InteractionOptions";
            _typeNameTable[31] = "Esri.ArcGISRuntime.UI.GraphicsOverlayCollection";
            _typeNameTable[32] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>";
            _typeNameTable[33] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>";
            _typeNameTable[34] = "Esri.ArcGISRuntime.UI.GraphicsOverlay";
            _typeNameTable[35] = "Esri.ArcGISRuntime.UI.GraphicCollection";
            _typeNameTable[36] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[37] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[38] = "Esri.ArcGISRuntime.UI.Graphic";
            _typeNameTable[39] = "Esri.ArcGISRuntime.Data.GeoElement";
            _typeNameTable[40] = "Esri.ArcGISRuntime.Symbology.Symbol";
            _typeNameTable[41] = "Int32";
            _typeNameTable[42] = "System.Collections.Generic.IDictionary`2<String, Object>";
            _typeNameTable[43] = "Esri.ArcGISRuntime.UI.GraphicsRenderingMode";
            _typeNameTable[44] = "Windows.UI.Color";
            _typeNameTable[45] = "Esri.ArcGISRuntime.Symbology.Renderer";
            _typeNameTable[46] = "Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition";
            _typeNameTable[47] = "Esri.ArcGISRuntime.Mapping.LayerSceneProperties";
            _typeNameTable[48] = "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[49] = "System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>";
            _typeNameTable[50] = "Esri.ArcGISRuntime.Mapping.LabelDefinition";
            _typeNameTable[51] = "Esri.ArcGISRuntime.UI.DrawStatus";
            _typeNameTable[52] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[53] = "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl";
            _typeNameTable[54] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[55] = "Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection";
            _typeNameTable[56] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[57] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[58] = "Esri.ArcGISRuntime.Geometry.MapPoint";
            _typeNameTable[59] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[60] = "sample.MainPage";
            _typeNameTable[61] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[62] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[63] = "Esri.ArcGISRuntime.Symbology.PictureFillSymbol";
            _typeNameTable[64] = "Esri.ArcGISRuntime.Symbology.FillSymbol";
            _typeNameTable[65] = "System.Uri";
            _typeNameTable[66] = "Esri.ArcGISRuntime.Symbology.LineSymbol";
            _typeNameTable[67] = "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol";
            _typeNameTable[68] = "Esri.ArcGISRuntime.Symbology.MarkerSymbol";
            _typeNameTable[69] = "Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment";
            _typeNameTable[70] = "Esri.ArcGISRuntime.Symbology.RotationType";
            _typeNameTable[71] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol";
            _typeNameTable[72] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle";
            _typeNameTable[73] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol";
            _typeNameTable[74] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle";
            _typeNameTable[75] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol";
            _typeNameTable[76] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle";
            _typeNameTable[77] = "Esri.ArcGISRuntime.Symbology.TextSymbol";
            _typeNameTable[78] = "Esri.ArcGISRuntime.Symbology.FontDecoration";
            _typeNameTable[79] = "Esri.ArcGISRuntime.Symbology.FontStyle";
            _typeNameTable[80] = "Esri.ArcGISRuntime.Symbology.FontWeight";
            _typeNameTable[81] = "Esri.ArcGISRuntime.Symbology.HorizontalAlignment";
            _typeNameTable[82] = "Esri.ArcGISRuntime.Symbology.VerticalAlignment";

            _typeTable = new global::System.Type[83];
            _typeTable[0] = typeof(global::Esri.ArcGISRuntime.UI.Controls.MapView);
            _typeTable[1] = typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[3] = typeof(global::Esri.ArcGISRuntime.Mapping.Map);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::Esri.ArcGISRuntime.Mapping.LayerCollection);
            _typeTable[6] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.Mapping.Layer>);
            _typeTable[7] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.Mapping.Layer>);
            _typeTable[8] = typeof(global::Esri.ArcGISRuntime.Mapping.Layer);
            _typeTable[9] = typeof(global::Esri.ArcGISRuntime.LoadStatus);
            _typeTable[10] = typeof(global::System.Enum);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Exception);
            _typeTable[13] = typeof(global::Esri.ArcGISRuntime.Portal.Item);
            _typeTable[14] = typeof(global::System.String);
            _typeTable[15] = typeof(global::System.Double);
            _typeTable[16] = typeof(global::Esri.ArcGISRuntime.Geometry.SpatialReference);
            _typeTable[17] = typeof(global::Esri.ArcGISRuntime.Geometry.Envelope);
            _typeTable[18] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[19] = typeof(global::System.Boolean);
            _typeTable[20] = typeof(global::System.Collections.Generic.IReadOnlyList<global::Esri.ArcGISRuntime.Mapping.ILayerContent>);
            _typeTable[21] = typeof(global::Esri.ArcGISRuntime.Geometry.Polygon);
            _typeTable[22] = typeof(global::Esri.ArcGISRuntime.Geometry.Multipart);
            _typeTable[23] = typeof(global::Esri.ArcGISRuntime.UI.WrapAroundMode);
            _typeTable[24] = typeof(global::Esri.ArcGISRuntime.UI.ViewLabelProperties);
            _typeTable[25] = typeof(global::Esri.ArcGISRuntime.UI.LocationDisplay);
            _typeTable[26] = typeof(global::Esri.ArcGISRuntime.UI.BackgroundGrid);
            _typeTable[27] = typeof(global::Esri.ArcGISRuntime.UI.Grid);
            _typeTable[28] = typeof(global::Esri.ArcGISRuntime.UI.SketchEditor);
            _typeTable[29] = typeof(global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions);
            _typeTable[30] = typeof(global::Esri.ArcGISRuntime.UI.InteractionOptions);
            _typeTable[31] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection);
            _typeTable[32] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>);
            _typeTable[33] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>);
            _typeTable[34] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsOverlay);
            _typeTable[35] = typeof(global::Esri.ArcGISRuntime.UI.GraphicCollection);
            _typeTable[36] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[37] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[38] = typeof(global::Esri.ArcGISRuntime.UI.Graphic);
            _typeTable[39] = typeof(global::Esri.ArcGISRuntime.Data.GeoElement);
            _typeTable[40] = typeof(global::Esri.ArcGISRuntime.Symbology.Symbol);
            _typeTable[41] = typeof(global::System.Int32);
            _typeTable[42] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>);
            _typeTable[43] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode);
            _typeTable[44] = typeof(global::Windows.UI.Color);
            _typeTable[45] = typeof(global::Esri.ArcGISRuntime.Symbology.Renderer);
            _typeTable[46] = typeof(global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition);
            _typeTable[47] = typeof(global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties);
            _typeTable[48] = typeof(global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[49] = typeof(global::System.Collections.Generic.IList<global::Esri.ArcGISRuntime.Mapping.LabelDefinition>);
            _typeTable[50] = typeof(global::Esri.ArcGISRuntime.Mapping.LabelDefinition);
            _typeTable[51] = typeof(global::Esri.ArcGISRuntime.UI.DrawStatus);
            _typeTable[52] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[53] = typeof(global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[55] = typeof(global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection);
            _typeTable[56] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[57] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[58] = typeof(global::Esri.ArcGISRuntime.Geometry.MapPoint);
            _typeTable[59] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[60] = typeof(global::sample.MainPage);
            _typeTable[61] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[62] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[63] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol);
            _typeTable[64] = typeof(global::Esri.ArcGISRuntime.Symbology.FillSymbol);
            _typeTable[65] = typeof(global::System.Uri);
            _typeTable[66] = typeof(global::Esri.ArcGISRuntime.Symbology.LineSymbol);
            _typeTable[67] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol);
            _typeTable[68] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerSymbol);
            _typeTable[69] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment);
            _typeTable[70] = typeof(global::Esri.ArcGISRuntime.Symbology.RotationType);
            _typeTable[71] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol);
            _typeTable[72] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle);
            _typeTable[73] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol);
            _typeTable[74] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle);
            _typeTable[75] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol);
            _typeTable[76] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle);
            _typeTable[77] = typeof(global::Esri.ArcGISRuntime.Symbology.TextSymbol);
            _typeTable[78] = typeof(global::Esri.ArcGISRuntime.Symbology.FontDecoration);
            _typeTable[79] = typeof(global::Esri.ArcGISRuntime.Symbology.FontStyle);
            _typeTable[80] = typeof(global::Esri.ArcGISRuntime.Symbology.FontWeight);
            _typeTable[81] = typeof(global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment);
            _typeTable[82] = typeof(global::Esri.ArcGISRuntime.Symbology.VerticalAlignment);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MapView() { return new global::Esri.ArcGISRuntime.UI.Controls.MapView(); }
        private object Activate_3_Map() { return new global::Esri.ArcGISRuntime.Mapping.Map(); }
        private object Activate_5_LayerCollection() { return new global::Esri.ArcGISRuntime.Mapping.LayerCollection(); }
        private object Activate_12_Exception() { return new global::System.Exception(); }
        private object Activate_24_ViewLabelProperties() { return new global::Esri.ArcGISRuntime.UI.ViewLabelProperties(); }
        private object Activate_26_BackgroundGrid() { return new global::Esri.ArcGISRuntime.UI.BackgroundGrid(); }
        private object Activate_28_SketchEditor() { return new global::Esri.ArcGISRuntime.UI.SketchEditor(); }
        private object Activate_29_MapViewInteractionOptions() { return new global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions(); }
        private object Activate_31_GraphicsOverlayCollection() { return new global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection(); }
        private object Activate_34_GraphicsOverlay() { return new global::Esri.ArcGISRuntime.UI.GraphicsOverlay(); }
        private object Activate_38_Graphic() { return new global::Esri.ArcGISRuntime.UI.Graphic(); }
        private object Activate_46_PopupDefinition() { return new global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition(); }
        private object Activate_47_LayerSceneProperties() { return new global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties(); }
        private object Activate_53_OverlayItemsControl() { return new global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl(); }
        private object Activate_56_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_57_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_60_MainPage() { return new global::sample.MainPage(); }
        private object Activate_71_SimpleFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol(); }
        private object Activate_73_SimpleLineSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol(); }
        private object Activate_75_SimpleMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol(); }
        private object Activate_77_TextSymbol() { return new global::Esri.ArcGISRuntime.Symbology.TextSymbol(); }
        private void VectorAdd_5_LayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_31_GraphicsOverlayCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_GraphicCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_37_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void MapAdd_42_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_49_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.LabelDefinition>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.LabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_OverlayItemsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_56_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_57_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::sample.sample_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::sample.sample_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Esri.ArcGISRuntime.UI.Controls.MapView
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView"));
                userType.Activator = Activate_0_MapView;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.Controls.MapView.Map");
                userType.AddMemberName("Map");
                userType.AddMemberName("MapScale");
                userType.AddMemberName("MapRotation");
                userType.AddMemberName("UnitsPerPixel");
                userType.AddMemberName("VisibleArea");
                userType.AddMemberName("WrapAroundMode");
                userType.AddMemberName("Labeling");
                userType.AddMemberName("LocationDisplay");
                userType.AddMemberName("BackgroundGrid");
                userType.AddMemberName("Grid");
                userType.AddMemberName("SketchEditor");
                userType.AddMemberName("InteractionOptions");
                xamlType = userType;
                break;

            case 1:   //  Esri.ArcGISRuntime.UI.Controls.GeoView
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("IsCalloutVisible");
                userType.AddMemberName("GraphicsOverlays");
                userType.AddMemberName("IsAttributionTextVisible");
                userType.AddMemberName("AttributionText");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("IsWrapAroundEnabled");
                userType.AddMemberName("IsNavigating");
                userType.AddMemberName("DrawStatus");
                userType.AddMemberName("ViewInsets");
                userType.AddMemberName("Overlays");
                userType.AddMemberName("ViewOverlayAnchor");
                xamlType = userType;
                break;

            case 2:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Esri.ArcGISRuntime.Mapping.Map
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Map;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Mapping.Map.OperationalLayers");
                userType.AddMemberName("OperationalLayers");
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Esri.ArcGISRuntime.Mapping.LayerCollection
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>"));
                userType.CollectionAdd = VectorAdd_5_LayerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>"));
                userType.CollectionAdd = VectorAdd_6_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 7:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_7_RuntimeCollection;
                xamlType = userType;
                break;

            case 8:   //  Esri.ArcGISRuntime.Mapping.Layer
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("LoadStatus");
                userType.AddMemberName("LoadError");
                userType.AddMemberName("Item");
                userType.AddMemberName("Attribution");
                userType.AddMemberName("Description");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Id");
                userType.AddMemberName("FullExtent");
                userType.AddMemberName("CanChangeVisibility");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsIdentifyEnabled");
                userType.AddMemberName("Name");
                userType.AddMemberName("ShowInLegend");
                userType.AddMemberName("SublayerContents");
                xamlType = userType;
                break;

            case 9:   //  Esri.ArcGISRuntime.LoadStatus
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Loaded", global::Esri.ArcGISRuntime.LoadStatus.Loaded);
                userType.AddEnumValue("Loading", global::Esri.ArcGISRuntime.LoadStatus.Loading);
                userType.AddEnumValue("FailedToLoad", global::Esri.ArcGISRuntime.LoadStatus.FailedToLoad);
                userType.AddEnumValue("NotLoaded", global::Esri.ArcGISRuntime.LoadStatus.NotLoaded);
                xamlType = userType;
                break;

            case 10:   //  System.Enum
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  System.Exception
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  Esri.ArcGISRuntime.Portal.Item
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  String
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Double
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Esri.ArcGISRuntime.Geometry.SpatialReference
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Esri.ArcGISRuntime.Geometry.Envelope
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  Boolean
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  Esri.ArcGISRuntime.Geometry.Polygon
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Multipart"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Esri.ArcGISRuntime.Geometry.Multipart
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                xamlType = userType;
                break;

            case 23:   //  Esri.ArcGISRuntime.UI.WrapAroundMode
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("EnabledWhenSupported", global::Esri.ArcGISRuntime.UI.WrapAroundMode.EnabledWhenSupported);
                userType.AddEnumValue("Disabled", global::Esri.ArcGISRuntime.UI.WrapAroundMode.Disabled);
                xamlType = userType;
                break;

            case 24:   //  Esri.ArcGISRuntime.UI.ViewLabelProperties
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Esri.ArcGISRuntime.UI.LocationDisplay
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Esri.ArcGISRuntime.UI.BackgroundGrid
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Esri.ArcGISRuntime.UI.Grid
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  Esri.ArcGISRuntime.UI.SketchEditor
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Esri.ArcGISRuntime.UI.MapViewInteractionOptions
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.UI.InteractionOptions"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Esri.ArcGISRuntime.UI.InteractionOptions
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 31:   //  Esri.ArcGISRuntime.UI.GraphicsOverlayCollection
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>"));
                userType.CollectionAdd = VectorAdd_31_GraphicsOverlayCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>"));
                userType.CollectionAdd = VectorAdd_32_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 33:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_33_RuntimeCollection;
                xamlType = userType;
                break;

            case 34:   //  Esri.ArcGISRuntime.UI.GraphicsOverlay
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_GraphicsOverlay;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.GraphicsOverlay.Graphics");
                userType.AddMemberName("Graphics");
                userType.AddMemberName("Id");
                userType.AddMemberName("Extent");
                userType.AddMemberName("RenderingMode");
                userType.AddMemberName("SelectionColor");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("IsPopupEnabled");
                userType.AddMemberName("PopupDefinition");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("SceneProperties");
                userType.AddMemberName("SelectedGraphics");
                userType.AddMemberName("LabelDefinitions");
                userType.AddMemberName("LabelsEnabled");
                xamlType = userType;
                break;

            case 35:   //  Esri.ArcGISRuntime.UI.GraphicCollection
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>"));
                userType.CollectionAdd = VectorAdd_35_GraphicCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>"));
                userType.CollectionAdd = VectorAdd_36_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 37:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_37_RuntimeCollection;
                xamlType = userType;
                break;

            case 38:   //  Esri.ArcGISRuntime.UI.Graphic
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Data.GeoElement"));
                userType.Activator = Activate_38_Graphic;
                userType.AddMemberName("GraphicsOverlay");
                userType.AddMemberName("Geometry");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("ZIndex");
                xamlType = userType;
                break;

            case 39:   //  Esri.ArcGISRuntime.Data.GeoElement
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Attributes");
                xamlType = userType;
                break;

            case 40:   //  Esri.ArcGISRuntime.Symbology.Symbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 41:   //  Int32
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  System.Collections.Generic.IDictionary`2<String, Object>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_42_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Esri.ArcGISRuntime.UI.GraphicsRenderingMode
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dynamic", global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Dynamic);
                userType.AddEnumValue("Static", global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Static);
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Color
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  Esri.ArcGISRuntime.Symbology.Renderer
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Esri.ArcGISRuntime.Mapping.LayerSceneProperties
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_49_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  Esri.ArcGISRuntime.Mapping.LabelDefinition
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 51:   //  Esri.ArcGISRuntime.UI.DrawStatus
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("InProgress", global::Esri.ArcGISRuntime.UI.DrawStatus.InProgress);
                userType.AddEnumValue("Completed", global::Esri.ArcGISRuntime.UI.DrawStatus.Completed);
                xamlType = userType;
                break;

            case 52:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_53_OverlayItemsControl;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl.Items");
                userType.AddMemberName("Items");
                xamlType = userType;
                break;

            case 54:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Object>"));
                userType.CollectionAdd = VectorAdd_55_OverlayItemsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.Activator = Activate_56_ObservableCollection;
                userType.CollectionAdd = VectorAdd_56_ObservableCollection;
                xamlType = userType;
                break;

            case 57:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_Collection;
                userType.CollectionAdd = VectorAdd_57_Collection;
                xamlType = userType;
                break;

            case 58:   //  Esri.ArcGISRuntime.Geometry.MapPoint
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  sample.MainPage
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_60_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::sample.sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  Esri.ArcGISRuntime.Symbology.PictureFillSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Angle");
                userType.AddMemberName("ScaleX");
                userType.AddMemberName("ScaleY");
                userType.AddMemberName("Uri");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 64:   //  Esri.ArcGISRuntime.Symbology.FillSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Color");
                userType.AddMemberName("Outline");
                xamlType = userType;
                break;

            case 65:   //  System.Uri
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  Esri.ArcGISRuntime.Symbology.LineSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Color");
                userType.AddMemberName("Width");
                userType.AddMemberName("AntiAlias");
                xamlType = userType;
                break;

            case 67:   //  Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Uri");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 68:   //  Esri.ArcGISRuntime.Symbology.MarkerSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Angle");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("LeaderOffsetX");
                userType.AddMemberName("LeaderOffsetY");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("RotationType");
                xamlType = userType;
                break;

            case 69:   //  Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Map", global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Map);
                userType.AddEnumValue("Screen", global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Screen);
                xamlType = userType;
                break;

            case 70:   //  Esri.ArcGISRuntime.Symbology.RotationType
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arithmetic", global::Esri.ArcGISRuntime.Symbology.RotationType.Arithmetic);
                userType.AddEnumValue("Geographic", global::Esri.ArcGISRuntime.Symbology.RotationType.Geographic);
                xamlType = userType;
                break;

            case 71:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_71_SimpleFillSymbol;
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 72:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BackwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.BackwardDiagonal);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Cross);
                userType.AddEnumValue("DiagonalCross", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.DiagonalCross);
                userType.AddEnumValue("ForwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.ForwardDiagonal);
                userType.AddEnumValue("Horizontal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Horizontal);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Solid);
                userType.AddEnumValue("Vertical", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Vertical);
                xamlType = userType;
                break;

            case 73:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol"));
                userType.Activator = Activate_73_SimpleLineSymbol;
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 74:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dash", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dash);
                userType.AddEnumValue("DashDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDot);
                userType.AddEnumValue("DashDotDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDotDot);
                userType.AddEnumValue("Dot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dot);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Solid);
                xamlType = userType;
                break;

            case 75:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_75_SimpleMarkerSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Color");
                userType.AddMemberName("Size");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 76:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Circle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Circle);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Cross);
                userType.AddEnumValue("Diamond", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Diamond);
                userType.AddEnumValue("Square", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Square);
                userType.AddEnumValue("Triangle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Triangle);
                userType.AddEnumValue("X", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.X);
                xamlType = userType;
                break;

            case 77:   //  Esri.ArcGISRuntime.Symbology.TextSymbol
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_77_TextSymbol;
                userType.AddMemberName("Color");
                userType.AddMemberName("FontDecoration");
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("Size");
                userType.AddMemberName("Text");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HaloColor");
                userType.AddMemberName("HaloWidth");
                userType.AddMemberName("OutlineColor");
                userType.AddMemberName("OutlineWidth");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("KerningEnabled");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 78:   //  Esri.ArcGISRuntime.Symbology.FontDecoration
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("LineThrough", global::Esri.ArcGISRuntime.Symbology.FontDecoration.LineThrough);
                userType.AddEnumValue("None", global::Esri.ArcGISRuntime.Symbology.FontDecoration.None);
                userType.AddEnumValue("Underline", global::Esri.ArcGISRuntime.Symbology.FontDecoration.Underline);
                xamlType = userType;
                break;

            case 79:   //  Esri.ArcGISRuntime.Symbology.FontStyle
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Italic", global::Esri.ArcGISRuntime.Symbology.FontStyle.Italic);
                userType.AddEnumValue("Normal", global::Esri.ArcGISRuntime.Symbology.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Esri.ArcGISRuntime.Symbology.FontStyle.Oblique);
                xamlType = userType;
                break;

            case 80:   //  Esri.ArcGISRuntime.Symbology.FontWeight
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bold", global::Esri.ArcGISRuntime.Symbology.FontWeight.Bold);
                userType.AddEnumValue("Normal", global::Esri.ArcGISRuntime.Symbology.FontWeight.Normal);
                xamlType = userType;
                break;

            case 81:   //  Esri.ArcGISRuntime.Symbology.HorizontalAlignment
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Center", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Center);
                userType.AddEnumValue("Justify", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Justify);
                userType.AddEnumValue("Left", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Left);
                userType.AddEnumValue("Right", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Right);
                xamlType = userType;
                break;

            case 82:   //  Esri.ArcGISRuntime.Symbology.VerticalAlignment
                userType = new global::sample.sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Baseline", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Baseline);
                userType.AddEnumValue("Bottom", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Bottom);
                userType.AddEnumValue("Middle", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Middle);
                userType.AddEnumValue("Top", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Top);
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_Universal_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_MapView_Map(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Map;
        }
        private void set_0_MapView_Map(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Map = (global::Esri.ArcGISRuntime.Mapping.Map)Value;
        }
        private object get_1_Map_OperationalLayers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Map)instance;
            return that.OperationalLayers;
        }
        private void set_1_Map_OperationalLayers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Map)instance;
            that.OperationalLayers = (global::Esri.ArcGISRuntime.Mapping.LayerCollection)Value;
        }
        private object get_2_Layer_LoadStatus(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.LoadStatus;
        }
        private object get_3_Layer_LoadError(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.LoadError;
        }
        private object get_4_Layer_Item(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Item;
        }
        private object get_5_Layer_Attribution(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Attribution;
        }
        private object get_6_Layer_Description(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Description;
        }
        private object get_7_Layer_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.MaxScale;
        }
        private void set_7_Layer_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_8_Layer_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.MinScale;
        }
        private void set_8_Layer_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_9_Layer_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.SpatialReference;
        }
        private object get_10_Layer_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Opacity;
        }
        private void set_10_Layer_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_11_Layer_Id(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Id;
        }
        private void set_11_Layer_Id(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_12_Layer_FullExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.FullExtent;
        }
        private object get_13_Layer_CanChangeVisibility(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.CanChangeVisibility;
        }
        private object get_14_Layer_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.IsVisible;
        }
        private void set_14_Layer_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_15_Layer_IsIdentifyEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.IsIdentifyEnabled;
        }
        private object get_16_Layer_Name(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Name;
        }
        private void set_16_Layer_Name(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_17_Layer_ShowInLegend(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.ShowInLegend;
        }
        private void set_17_Layer_ShowInLegend(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.ShowInLegend = (global::System.Boolean)Value;
        }
        private object get_18_Layer_SublayerContents(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.SublayerContents;
        }
        private object get_19_MapView_MapScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.MapScale;
        }
        private object get_20_MapView_MapRotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.MapRotation;
        }
        private object get_21_MapView_UnitsPerPixel(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.UnitsPerPixel;
        }
        private object get_22_MapView_VisibleArea(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.VisibleArea;
        }
        private object get_23_MapView_WrapAroundMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.WrapAroundMode;
        }
        private void set_23_MapView_WrapAroundMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.WrapAroundMode = (global::Esri.ArcGISRuntime.UI.WrapAroundMode)Value;
        }
        private object get_24_MapView_Labeling(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Labeling;
        }
        private void set_24_MapView_Labeling(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Labeling = (global::Esri.ArcGISRuntime.UI.ViewLabelProperties)Value;
        }
        private object get_25_MapView_LocationDisplay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.LocationDisplay;
        }
        private object get_26_MapView_BackgroundGrid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.BackgroundGrid;
        }
        private void set_26_MapView_BackgroundGrid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.BackgroundGrid = (global::Esri.ArcGISRuntime.UI.BackgroundGrid)Value;
        }
        private object get_27_MapView_Grid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Grid;
        }
        private void set_27_MapView_Grid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Grid = (global::Esri.ArcGISRuntime.UI.Grid)Value;
        }
        private object get_28_MapView_SketchEditor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.SketchEditor;
        }
        private void set_28_MapView_SketchEditor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.SketchEditor = (global::Esri.ArcGISRuntime.UI.SketchEditor)Value;
        }
        private object get_29_MapView_InteractionOptions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.InteractionOptions;
        }
        private void set_29_MapView_InteractionOptions(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.InteractionOptions = (global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions)Value;
        }
        private object get_30_GeoView_IsCalloutVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsCalloutVisible;
        }
        private object get_31_GeoView_GraphicsOverlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.GraphicsOverlays;
        }
        private void set_31_GeoView_GraphicsOverlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.GraphicsOverlays = (global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection)Value;
        }
        private object get_32_GraphicsOverlay_Graphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Graphics;
        }
        private object get_33_Graphic_GraphicsOverlay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.GraphicsOverlay;
        }
        private object get_34_Graphic_Geometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.Geometry;
        }
        private void set_34_Graphic_Geometry(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.Geometry = (global::Esri.ArcGISRuntime.Geometry.Geometry)Value;
        }
        private object get_35_Graphic_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.Symbol;
        }
        private void set_35_Graphic_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.Symbol)Value;
        }
        private object get_36_Graphic_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.IsVisible;
        }
        private void set_36_Graphic_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_37_Graphic_IsSelected(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.IsSelected;
        }
        private void set_37_Graphic_IsSelected(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_38_Graphic_ZIndex(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.ZIndex;
        }
        private void set_38_Graphic_ZIndex(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_39_GeoElement_Attributes(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Data.GeoElement)instance;
            return that.Attributes;
        }
        private object get_40_GraphicsOverlay_Id(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Id;
        }
        private void set_40_GraphicsOverlay_Id(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_41_GraphicsOverlay_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Extent;
        }
        private object get_42_GraphicsOverlay_RenderingMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.RenderingMode;
        }
        private void set_42_GraphicsOverlay_RenderingMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.RenderingMode = (global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode)Value;
        }
        private object get_43_GraphicsOverlay_SelectionColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SelectionColor;
        }
        private void set_43_GraphicsOverlay_SelectionColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.SelectionColor = (global::Windows.UI.Color)Value;
        }
        private object get_44_GraphicsOverlay_Renderer(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Renderer;
        }
        private void set_44_GraphicsOverlay_Renderer(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Renderer = (global::Esri.ArcGISRuntime.Symbology.Renderer)Value;
        }
        private object get_45_GraphicsOverlay_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.IsVisible;
        }
        private void set_45_GraphicsOverlay_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_46_GraphicsOverlay_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Opacity;
        }
        private void set_46_GraphicsOverlay_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_47_GraphicsOverlay_IsPopupEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.IsPopupEnabled;
        }
        private void set_47_GraphicsOverlay_IsPopupEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.IsPopupEnabled = (global::System.Boolean)Value;
        }
        private object get_48_GraphicsOverlay_PopupDefinition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.PopupDefinition;
        }
        private void set_48_GraphicsOverlay_PopupDefinition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.PopupDefinition = (global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition)Value;
        }
        private object get_49_GraphicsOverlay_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.MinScale;
        }
        private void set_49_GraphicsOverlay_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_50_GraphicsOverlay_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.MaxScale;
        }
        private void set_50_GraphicsOverlay_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_51_GraphicsOverlay_SceneProperties(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SceneProperties;
        }
        private void set_51_GraphicsOverlay_SceneProperties(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.SceneProperties = (global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties)Value;
        }
        private object get_52_GraphicsOverlay_SelectedGraphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SelectedGraphics;
        }
        private object get_53_GraphicsOverlay_LabelDefinitions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.LabelDefinitions;
        }
        private object get_54_GraphicsOverlay_LabelsEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.LabelsEnabled;
        }
        private void set_54_GraphicsOverlay_LabelsEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.LabelsEnabled = (global::System.Boolean)Value;
        }
        private object get_55_GeoView_IsAttributionTextVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsAttributionTextVisible;
        }
        private void set_55_GeoView_IsAttributionTextVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.IsAttributionTextVisible = (global::System.Boolean)Value;
        }
        private object get_56_GeoView_AttributionText(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.AttributionText;
        }
        private object get_57_GeoView_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.SpatialReference;
        }
        private object get_58_GeoView_IsWrapAroundEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsWrapAroundEnabled;
        }
        private object get_59_GeoView_IsNavigating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsNavigating;
        }
        private object get_60_GeoView_DrawStatus(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.DrawStatus;
        }
        private object get_61_GeoView_ViewInsets(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.ViewInsets;
        }
        private void set_61_GeoView_ViewInsets(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.ViewInsets = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_62_GeoView_Overlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.Overlays;
        }
        private void set_62_GeoView_Overlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.Overlays = (global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl)Value;
        }
        private object get_63_OverlayItemsControl_Items(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl)instance;
            return that.Items;
        }
        private object get_64_GeoView_ViewOverlayAnchor(object instance)
        {
            return global::Esri.ArcGISRuntime.UI.Controls.GeoView.GetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_64_GeoView_ViewOverlayAnchor(object instance, object Value)
        {
            global::Esri.ArcGISRuntime.UI.Controls.GeoView.SetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value);
        }
        private object get_65_PictureFillSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Opacity;
        }
        private void set_65_PictureFillSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_66_PictureFillSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Width;
        }
        private void set_66_PictureFillSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_67_PictureFillSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Height;
        }
        private void set_67_PictureFillSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_68_PictureFillSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Angle;
        }
        private void set_68_PictureFillSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_69_PictureFillSymbol_ScaleX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.ScaleX;
        }
        private void set_69_PictureFillSymbol_ScaleX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.ScaleX = (global::System.Double)Value;
        }
        private object get_70_PictureFillSymbol_ScaleY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.ScaleY;
        }
        private void set_70_PictureFillSymbol_ScaleY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.ScaleY = (global::System.Double)Value;
        }
        private object get_71_PictureFillSymbol_Uri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Uri;
        }
        private void set_71_PictureFillSymbol_Uri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Uri = (global::System.Uri)Value;
        }
        private object get_72_FillSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            return that.Color;
        }
        private void set_72_FillSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_73_FillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            return that.Outline;
        }
        private void set_73_FillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)Value;
        }
        private object get_74_PictureMarkerSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Opacity;
        }
        private void set_74_PictureMarkerSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_75_PictureMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Width;
        }
        private void set_75_PictureMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_76_PictureMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Height;
        }
        private void set_76_PictureMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_77_PictureMarkerSymbol_Uri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Uri;
        }
        private void set_77_PictureMarkerSymbol_Uri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Uri = (global::System.Uri)Value;
        }
        private object get_78_MarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.Angle;
        }
        private void set_78_MarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_79_MarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_79_MarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment)Value;
        }
        private object get_80_MarkerSymbol_LeaderOffsetX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.LeaderOffsetX;
        }
        private void set_80_MarkerSymbol_LeaderOffsetX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.LeaderOffsetX = (global::System.Double)Value;
        }
        private object get_81_MarkerSymbol_LeaderOffsetY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.LeaderOffsetY;
        }
        private void set_81_MarkerSymbol_LeaderOffsetY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.LeaderOffsetY = (global::System.Double)Value;
        }
        private object get_82_MarkerSymbol_OffsetX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.OffsetX;
        }
        private void set_82_MarkerSymbol_OffsetX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_83_MarkerSymbol_OffsetY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.OffsetY;
        }
        private void set_83_MarkerSymbol_OffsetY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.OffsetY = (global::System.Double)Value;
        }
        private object get_84_MarkerSymbol_RotationType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.RotationType;
        }
        private void set_84_MarkerSymbol_RotationType(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.RotationType = (global::Esri.ArcGISRuntime.Symbology.RotationType)Value;
        }
        private object get_85_SimpleFillSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Style;
        }
        private void set_85_SimpleFillSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle)Value;
        }
        private object get_86_SimpleLineSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Style;
        }
        private void set_86_SimpleLineSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle)Value;
        }
        private object get_87_LineSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.Color;
        }
        private void set_87_LineSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_88_LineSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.Width;
        }
        private void set_88_LineSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_89_LineSymbol_AntiAlias(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.AntiAlias;
        }
        private void set_89_LineSymbol_AntiAlias(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.AntiAlias = (global::System.Boolean)Value;
        }
        private object get_90_SimpleMarkerSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Outline;
        }
        private void set_90_SimpleMarkerSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_91_SimpleMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Color;
        }
        private void set_91_SimpleMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_92_SimpleMarkerSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Size;
        }
        private void set_92_SimpleMarkerSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_93_SimpleMarkerSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Style;
        }
        private void set_93_SimpleMarkerSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle)Value;
        }
        private object get_94_TextSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Color;
        }
        private void set_94_TextSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_95_TextSymbol_FontDecoration(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontDecoration;
        }
        private void set_95_TextSymbol_FontDecoration(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontDecoration = (global::Esri.ArcGISRuntime.Symbology.FontDecoration)Value;
        }
        private object get_96_TextSymbol_FontFamily(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontFamily;
        }
        private void set_96_TextSymbol_FontFamily(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontFamily = (global::System.String)Value;
        }
        private object get_97_TextSymbol_FontStyle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontStyle;
        }
        private void set_97_TextSymbol_FontStyle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontStyle = (global::Esri.ArcGISRuntime.Symbology.FontStyle)Value;
        }
        private object get_98_TextSymbol_FontWeight(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontWeight;
        }
        private void set_98_TextSymbol_FontWeight(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontWeight = (global::Esri.ArcGISRuntime.Symbology.FontWeight)Value;
        }
        private object get_99_TextSymbol_HorizontalAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HorizontalAlignment;
        }
        private void set_99_TextSymbol_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HorizontalAlignment = (global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment)Value;
        }
        private object get_100_TextSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Size;
        }
        private void set_100_TextSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_101_TextSymbol_Text(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Text;
        }
        private void set_101_TextSymbol_Text(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_102_TextSymbol_VerticalAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.VerticalAlignment;
        }
        private void set_102_TextSymbol_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.VerticalAlignment = (global::Esri.ArcGISRuntime.Symbology.VerticalAlignment)Value;
        }
        private object get_103_TextSymbol_HaloColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HaloColor;
        }
        private void set_103_TextSymbol_HaloColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HaloColor = (global::Windows.UI.Color)Value;
        }
        private object get_104_TextSymbol_HaloWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HaloWidth;
        }
        private void set_104_TextSymbol_HaloWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HaloWidth = (global::System.Double)Value;
        }
        private object get_105_TextSymbol_OutlineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.OutlineColor;
        }
        private void set_105_TextSymbol_OutlineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.OutlineColor = (global::Windows.UI.Color)Value;
        }
        private object get_106_TextSymbol_OutlineWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.OutlineWidth;
        }
        private void set_106_TextSymbol_OutlineWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.OutlineWidth = (global::System.Double)Value;
        }
        private object get_107_TextSymbol_BackgroundColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BackgroundColor;
        }
        private void set_107_TextSymbol_BackgroundColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_108_TextSymbol_KerningEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.KerningEnabled;
        }
        private void set_108_TextSymbol_KerningEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.KerningEnabled = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::sample.sample_XamlTypeInfo.XamlMember xamlMember = null;
            global::sample.sample_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Map":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Map", "Esri.ArcGISRuntime.Mapping.Map");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MapView_Map;
                xamlMember.Setter = set_0_MapView_Map;
                break;
            case "Esri.ArcGISRuntime.Mapping.Map.OperationalLayers":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Map");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "OperationalLayers", "Esri.ArcGISRuntime.Mapping.LayerCollection");
                xamlMember.Getter = get_1_Map_OperationalLayers;
                xamlMember.Setter = set_1_Map_OperationalLayers;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.LoadStatus":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LoadStatus", "Esri.ArcGISRuntime.LoadStatus");
                xamlMember.Getter = get_2_Layer_LoadStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.LoadError":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LoadError", "System.Exception");
                xamlMember.Getter = get_3_Layer_LoadError;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Item":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Item", "Esri.ArcGISRuntime.Portal.Item");
                xamlMember.Getter = get_4_Layer_Item;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Attribution":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Attribution", "String");
                xamlMember.Getter = get_5_Layer_Attribution;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Description":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_6_Layer_Description;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.MaxScale":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_7_Layer_MaxScale;
                xamlMember.Setter = set_7_Layer_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.MinScale":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_8_Layer_MinScale;
                xamlMember.Setter = set_8_Layer_MinScale;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.SpatialReference":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_9_Layer_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Opacity":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_10_Layer_Opacity;
                xamlMember.Setter = set_10_Layer_Opacity;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Id":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_11_Layer_Id;
                xamlMember.Setter = set_11_Layer_Id;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.FullExtent":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "FullExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_12_Layer_FullExtent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.CanChangeVisibility":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "CanChangeVisibility", "Boolean");
                xamlMember.Getter = get_13_Layer_CanChangeVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.IsVisible":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_14_Layer_IsVisible;
                xamlMember.Setter = set_14_Layer_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.IsIdentifyEnabled":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsIdentifyEnabled", "Boolean");
                xamlMember.Getter = get_15_Layer_IsIdentifyEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Name":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_16_Layer_Name;
                xamlMember.Setter = set_16_Layer_Name;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.ShowInLegend":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ShowInLegend", "Boolean");
                xamlMember.Getter = get_17_Layer_ShowInLegend;
                xamlMember.Setter = set_17_Layer_ShowInLegend;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.SublayerContents":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SublayerContents", "System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>");
                xamlMember.Getter = get_18_Layer_SublayerContents;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.MapScale":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MapScale", "Double");
                xamlMember.Getter = get_19_MapView_MapScale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.MapRotation":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MapRotation", "Double");
                xamlMember.Getter = get_20_MapView_MapRotation;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.UnitsPerPixel":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "UnitsPerPixel", "Double");
                xamlMember.Getter = get_21_MapView_UnitsPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.VisibleArea":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "VisibleArea", "Esri.ArcGISRuntime.Geometry.Polygon");
                xamlMember.Getter = get_22_MapView_VisibleArea;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.WrapAroundMode":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "WrapAroundMode", "Esri.ArcGISRuntime.UI.WrapAroundMode");
                xamlMember.Getter = get_23_MapView_WrapAroundMode;
                xamlMember.Setter = set_23_MapView_WrapAroundMode;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Labeling":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Labeling", "Esri.ArcGISRuntime.UI.ViewLabelProperties");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_MapView_Labeling;
                xamlMember.Setter = set_24_MapView_Labeling;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.LocationDisplay":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LocationDisplay", "Esri.ArcGISRuntime.UI.LocationDisplay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MapView_LocationDisplay;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.BackgroundGrid":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "BackgroundGrid", "Esri.ArcGISRuntime.UI.BackgroundGrid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_MapView_BackgroundGrid;
                xamlMember.Setter = set_26_MapView_BackgroundGrid;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Grid":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Grid", "Esri.ArcGISRuntime.UI.Grid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MapView_Grid;
                xamlMember.Setter = set_27_MapView_Grid;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.SketchEditor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SketchEditor", "Esri.ArcGISRuntime.UI.SketchEditor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_MapView_SketchEditor;
                xamlMember.Setter = set_28_MapView_SketchEditor;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.InteractionOptions":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "InteractionOptions", "Esri.ArcGISRuntime.UI.MapViewInteractionOptions");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MapView_InteractionOptions;
                xamlMember.Setter = set_29_MapView_InteractionOptions;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsCalloutVisible":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsCalloutVisible", "Boolean");
                xamlMember.Getter = get_30_GeoView_IsCalloutVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.GraphicsOverlays":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "GraphicsOverlays", "Esri.ArcGISRuntime.UI.GraphicsOverlayCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_GeoView_GraphicsOverlays;
                xamlMember.Setter = set_31_GeoView_GraphicsOverlays;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Graphics":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Graphics", "Esri.ArcGISRuntime.UI.GraphicCollection");
                xamlMember.Getter = get_32_GraphicsOverlay_Graphics;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.GraphicsOverlay":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "GraphicsOverlay", "Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember.Getter = get_33_Graphic_GraphicsOverlay;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.Geometry":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Geometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_34_Graphic_Geometry;
                xamlMember.Setter = set_34_Graphic_Geometry;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.Symbol":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.Symbol");
                xamlMember.Getter = get_35_Graphic_Symbol;
                xamlMember.Setter = set_35_Graphic_Symbol;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.IsVisible":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_36_Graphic_IsVisible;
                xamlMember.Setter = set_36_Graphic_IsVisible;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.IsSelected":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_37_Graphic_IsSelected;
                xamlMember.Setter = set_37_Graphic_IsSelected;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.ZIndex":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_38_Graphic_ZIndex;
                xamlMember.Setter = set_38_Graphic_ZIndex;
                break;
            case "Esri.ArcGISRuntime.Data.GeoElement.Attributes":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Data.GeoElement");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Attributes", "System.Collections.Generic.IDictionary`2<String, Object>");
                xamlMember.Getter = get_39_GeoElement_Attributes;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Id":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_40_GraphicsOverlay_Id;
                xamlMember.Setter = set_40_GraphicsOverlay_Id;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Extent":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_41_GraphicsOverlay_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.RenderingMode":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "RenderingMode", "Esri.ArcGISRuntime.UI.GraphicsRenderingMode");
                xamlMember.Getter = get_42_GraphicsOverlay_RenderingMode;
                xamlMember.Setter = set_42_GraphicsOverlay_RenderingMode;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectionColor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SelectionColor", "Windows.UI.Color");
                xamlMember.Getter = get_43_GraphicsOverlay_SelectionColor;
                xamlMember.Setter = set_43_GraphicsOverlay_SelectionColor;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Renderer":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Renderer", "Esri.ArcGISRuntime.Symbology.Renderer");
                xamlMember.Getter = get_44_GraphicsOverlay_Renderer;
                xamlMember.Setter = set_44_GraphicsOverlay_Renderer;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.IsVisible":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_45_GraphicsOverlay_IsVisible;
                xamlMember.Setter = set_45_GraphicsOverlay_IsVisible;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Opacity":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_46_GraphicsOverlay_Opacity;
                xamlMember.Setter = set_46_GraphicsOverlay_Opacity;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.IsPopupEnabled":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsPopupEnabled", "Boolean");
                xamlMember.Getter = get_47_GraphicsOverlay_IsPopupEnabled;
                xamlMember.Setter = set_47_GraphicsOverlay_IsPopupEnabled;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.PopupDefinition":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "PopupDefinition", "Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition");
                xamlMember.Getter = get_48_GraphicsOverlay_PopupDefinition;
                xamlMember.Setter = set_48_GraphicsOverlay_PopupDefinition;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.MinScale":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_49_GraphicsOverlay_MinScale;
                xamlMember.Setter = set_49_GraphicsOverlay_MinScale;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.MaxScale":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_50_GraphicsOverlay_MaxScale;
                xamlMember.Setter = set_50_GraphicsOverlay_MaxScale;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SceneProperties":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SceneProperties", "Esri.ArcGISRuntime.Mapping.LayerSceneProperties");
                xamlMember.Getter = get_51_GraphicsOverlay_SceneProperties;
                xamlMember.Setter = set_51_GraphicsOverlay_SceneProperties;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectedGraphics":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SelectedGraphics", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>");
                xamlMember.Getter = get_52_GraphicsOverlay_SelectedGraphics;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.LabelDefinitions":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>");
                xamlMember.Getter = get_53_GraphicsOverlay_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.LabelsEnabled":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LabelsEnabled", "Boolean");
                xamlMember.Getter = get_54_GraphicsOverlay_LabelsEnabled;
                xamlMember.Setter = set_54_GraphicsOverlay_LabelsEnabled;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsAttributionTextVisible":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsAttributionTextVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_GeoView_IsAttributionTextVisible;
                xamlMember.Setter = set_55_GeoView_IsAttributionTextVisible;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.AttributionText":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "AttributionText", "String");
                xamlMember.Getter = get_56_GeoView_AttributionText;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.SpatialReference":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_57_GeoView_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsWrapAroundEnabled":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsWrapAroundEnabled", "Boolean");
                xamlMember.Getter = get_58_GeoView_IsWrapAroundEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsNavigating":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_59_GeoView_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.DrawStatus":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "DrawStatus", "Esri.ArcGISRuntime.UI.DrawStatus");
                xamlMember.Getter = get_60_GeoView_DrawStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.ViewInsets":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ViewInsets", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_GeoView_ViewInsets;
                xamlMember.Setter = set_61_GeoView_ViewInsets;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.Overlays":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Overlays", "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_GeoView_Overlays;
                xamlMember.Setter = set_62_GeoView_Overlays;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl.Items":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Items", "Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection");
                xamlMember.Getter = get_63_OverlayItemsControl_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.ViewOverlayAnchor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ViewOverlayAnchor", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_64_GeoView_ViewOverlayAnchor;
                xamlMember.Setter = set_64_GeoView_ViewOverlayAnchor;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Opacity":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_65_PictureFillSymbol_Opacity;
                xamlMember.Setter = set_65_PictureFillSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Width":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_66_PictureFillSymbol_Width;
                xamlMember.Setter = set_66_PictureFillSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Height":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_67_PictureFillSymbol_Height;
                xamlMember.Setter = set_67_PictureFillSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Angle":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_68_PictureFillSymbol_Angle;
                xamlMember.Setter = set_68_PictureFillSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.ScaleX":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ScaleX", "Double");
                xamlMember.Getter = get_69_PictureFillSymbol_ScaleX;
                xamlMember.Setter = set_69_PictureFillSymbol_ScaleX;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.ScaleY":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "ScaleY", "Double");
                xamlMember.Getter = get_70_PictureFillSymbol_ScaleY;
                xamlMember.Setter = set_70_PictureFillSymbol_ScaleY;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Uri":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Uri", "System.Uri");
                xamlMember.Getter = get_71_PictureFillSymbol_Uri;
                xamlMember.Setter = set_71_PictureFillSymbol_Uri;
                break;
            case "Esri.ArcGISRuntime.Symbology.FillSymbol.Color":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_72_FillSymbol_Color;
                xamlMember.Setter = set_72_FillSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.FillSymbol.Outline":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember.Getter = get_73_FillSymbol_Outline;
                xamlMember.Setter = set_73_FillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Opacity":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_74_PictureMarkerSymbol_Opacity;
                xamlMember.Setter = set_74_PictureMarkerSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Width":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_75_PictureMarkerSymbol_Width;
                xamlMember.Setter = set_75_PictureMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Height":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_76_PictureMarkerSymbol_Height;
                xamlMember.Setter = set_76_PictureMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Uri":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Uri", "System.Uri");
                xamlMember.Getter = get_77_PictureMarkerSymbol_Uri;
                xamlMember.Setter = set_77_PictureMarkerSymbol_Uri;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.Angle":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_78_MarkerSymbol_Angle;
                xamlMember.Setter = set_78_MarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.AngleAlignment":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment");
                xamlMember.Getter = get_79_MarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_79_MarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetX":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LeaderOffsetX", "Double");
                xamlMember.Getter = get_80_MarkerSymbol_LeaderOffsetX;
                xamlMember.Setter = set_80_MarkerSymbol_LeaderOffsetX;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetY":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "LeaderOffsetY", "Double");
                xamlMember.Getter = get_81_MarkerSymbol_LeaderOffsetY;
                xamlMember.Setter = set_81_MarkerSymbol_LeaderOffsetY;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetX":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.Getter = get_82_MarkerSymbol_OffsetX;
                xamlMember.Setter = set_82_MarkerSymbol_OffsetX;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetY":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.Getter = get_83_MarkerSymbol_OffsetY;
                xamlMember.Setter = set_83_MarkerSymbol_OffsetY;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.RotationType":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "RotationType", "Esri.ArcGISRuntime.Symbology.RotationType");
                xamlMember.Getter = get_84_MarkerSymbol_RotationType;
                xamlMember.Setter = set_84_MarkerSymbol_RotationType;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle");
                xamlMember.Getter = get_85_SimpleFillSymbol_Style;
                xamlMember.Setter = set_85_SimpleFillSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle");
                xamlMember.Getter = get_86_SimpleLineSymbol_Style;
                xamlMember.Setter = set_86_SimpleLineSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.Color":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_87_LineSymbol_Color;
                xamlMember.Setter = set_87_LineSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.Width":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_88_LineSymbol_Width;
                xamlMember.Setter = set_88_LineSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.AntiAlias":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "AntiAlias", "Boolean");
                xamlMember.Getter = get_89_LineSymbol_AntiAlias;
                xamlMember.Setter = set_89_LineSymbol_AntiAlias;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_90_SimpleMarkerSymbol_Outline;
                xamlMember.Setter = set_90_SimpleMarkerSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_91_SimpleMarkerSymbol_Color;
                xamlMember.Setter = set_91_SimpleMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_92_SimpleMarkerSymbol_Size;
                xamlMember.Setter = set_92_SimpleMarkerSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle");
                xamlMember.Getter = get_93_SimpleMarkerSymbol_Style;
                xamlMember.Setter = set_93_SimpleMarkerSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Color":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_94_TextSymbol_Color;
                xamlMember.Setter = set_94_TextSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontDecoration":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "FontDecoration", "Esri.ArcGISRuntime.Symbology.FontDecoration");
                xamlMember.Getter = get_95_TextSymbol_FontDecoration;
                xamlMember.Setter = set_95_TextSymbol_FontDecoration;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontFamily":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "FontFamily", "String");
                xamlMember.Getter = get_96_TextSymbol_FontFamily;
                xamlMember.Setter = set_96_TextSymbol_FontFamily;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontStyle":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "FontStyle", "Esri.ArcGISRuntime.Symbology.FontStyle");
                xamlMember.Getter = get_97_TextSymbol_FontStyle;
                xamlMember.Setter = set_97_TextSymbol_FontStyle;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontWeight":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "FontWeight", "Esri.ArcGISRuntime.Symbology.FontWeight");
                xamlMember.Getter = get_98_TextSymbol_FontWeight;
                xamlMember.Setter = set_98_TextSymbol_FontWeight;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HorizontalAlignment":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Esri.ArcGISRuntime.Symbology.HorizontalAlignment");
                xamlMember.Getter = get_99_TextSymbol_HorizontalAlignment;
                xamlMember.Setter = set_99_TextSymbol_HorizontalAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Size":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_100_TextSymbol_Size;
                xamlMember.Setter = set_100_TextSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Text":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_101_TextSymbol_Text;
                xamlMember.Setter = set_101_TextSymbol_Text;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.VerticalAlignment":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Esri.ArcGISRuntime.Symbology.VerticalAlignment");
                xamlMember.Getter = get_102_TextSymbol_VerticalAlignment;
                xamlMember.Setter = set_102_TextSymbol_VerticalAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HaloColor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "HaloColor", "Windows.UI.Color");
                xamlMember.Getter = get_103_TextSymbol_HaloColor;
                xamlMember.Setter = set_103_TextSymbol_HaloColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HaloWidth":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "HaloWidth", "Double");
                xamlMember.Getter = get_104_TextSymbol_HaloWidth;
                xamlMember.Setter = set_104_TextSymbol_HaloWidth;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.OutlineColor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "OutlineColor", "Windows.UI.Color");
                xamlMember.Getter = get_105_TextSymbol_OutlineColor;
                xamlMember.Setter = set_105_TextSymbol_OutlineColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.OutlineWidth":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "OutlineWidth", "Double");
                xamlMember.Getter = get_106_TextSymbol_OutlineWidth;
                xamlMember.Setter = set_106_TextSymbol_OutlineWidth;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BackgroundColor":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Color");
                xamlMember.Getter = get_107_TextSymbol_BackgroundColor;
                xamlMember.Setter = set_107_TextSymbol_BackgroundColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.KerningEnabled":
                userType = (global::sample.sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::sample.sample_XamlTypeInfo.XamlMember(this, "KerningEnabled", "Boolean");
                xamlMember.Getter = get_108_TextSymbol_KerningEnabled;
                xamlMember.Setter = set_108_TextSymbol_KerningEnabled;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::sample.sample_XamlTypeInfo.XamlSystemBaseType
    {
        global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::sample.sample_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

